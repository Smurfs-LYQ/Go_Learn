package demo

import "fmt"

func Two() {
	// 声明一个存放int类型 容量为1的管道
	var ch = make(chan int, 1)
	// for循环10次
	for i := 0; i < 10; i++ {
		select {
		case ch <- i: // 尝试往ch中发送数据
		case res := <-ch: // 尝试从ch中接收值
			fmt.Println(res)
		}
	}

	/*
		执行结果:
			0
			2
			4
			6
			8
		流程分析:
			第一次循环: 会到case_1中尝试给ch管道发送数据，因为for循环刚开始，ch管道目前还为空，所以case_1可以放入数据，但是case_1中除了放入数据不执行任何程序。所以进入下一次循环。
			第二次循环: 会到case_1中尝试给ch管道发送数据，因为第一次循环已经向ch管道中发送数据了，而且ch管道的容量仅为1，此时ch管道已经满了，所以就会进入case_2中，case_2是接收值得操作，并且会把值打印出来。
			第三次循环: 会到case_1中尝试给ch管道发送数据，因为第二次循环已经把ch管道中的值取出了，所以ch管道目前为空，case_1可以放入数据，但是case_1中除了放入数据不执行任何程序。所以再次进入下一次循环。

			后面的操作跟上面的描述一致...
	*/
}
